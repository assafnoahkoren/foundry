// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GrantCause {
  manual
  subscription
}

// Example models
model User {
  id           String       @id @default(cuid())
  email        String       @unique
  name         String
  password     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userAccess   UserAccess[] @relation("UserAccess")
  grantedAccess UserAccess[] @relation("GrantedBy")
  joniScenarioResponses JoniScenarioResponse[]
  joniScenarioPractices JoniScenarioPractice[]
}

model UserAccess {
  id           String      @id @default(cuid())
  userId       String
  user         User        @relation("UserAccess", fields: [userId], references: [id], onDelete: Cascade)
  featureId    String
  subFeatureId String
  metadata     Json        @default("{}")
  grantedAt    DateTime    @default(now())
  grantedBy    String?     // ID of admin who granted access
  grantedByUser User?      @relation("GrantedBy", fields: [grantedBy], references: [id], onDelete: SetNull)
  grantCause   GrantCause  @default(manual)
  expiresAt    DateTime?   // Optional expiration date
  updatedAt    DateTime    @updatedAt
  
  @@unique([userId, featureId, subFeatureId])
  @@index([userId])
  @@index([featureId])
  @@index([subFeatureId])
  @@index([grantedBy])
}

// Joni Scenario Practice Models
// Subject represents high-level training areas (e.g., "Radio Communications", "Emergency Procedures")
model JoniScenarioSubject {
  id          String              @id @default(cuid())
  name        String              @unique
  description String?
  icon        String?             // Optional icon identifier for UI
  orderIndex  Int                 @default(1) // Display order
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  scenarios   JoniScenario[]      // Direct scenarios without groups
  groups      JoniScenarioGroup[] // Grouped scenarios
}

model JoniScenarioGroup {
  id          String         @id @default(cuid())
  name        String
  description String?
  groupType   String         @default("module") // "module", "difficulty", "training_program", "category"
  orderInSubject Int         @default(1) // Order of this group within the subject
  subjectId   String
  subject     JoniScenarioSubject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  scenarios   JoniScenario[]
  
  @@index([subjectId])
  @@index([subjectId, orderInSubject])
}

// A scenario represents a complete training exercise with multiple steps
model JoniScenario {
  id                String                 @id @default(cuid())
  name              String                 // e.g., "Medical Emergency Over Atlantic"
  shortDescription  String?                // Brief overview of the scenario
  subjectId         String
  subject           JoniScenarioSubject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  groupId           String?                // Optional - scenarios can exist without groups
  group             JoniScenarioGroup?     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  difficulty        String                 @default("intermediate") // "beginner", "intermediate", "advanced"
  estimatedMinutes  Int                    @default(15) // Estimated completion time
  // Keep old field for migration
  flightInformation String                 @db.Text
  // New fields for dynamic scenarios
  flightInformationJson Json?              // Flexible flight data (aircraft, route, weather, etc.)
  scenarioType      String                 @default("standard") // "standard", "emergency", "crm", "technical", "weather"
  initialContext    String?                @db.Text // Sets the scene for the pilot
  // Legacy fields - kept for backward compatibility
  expectedAnswer    String?                @db.Text
  currentStatus     String?                @db.Text
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  steps             JoniScenarioStep[]     // The sequence of events in this scenario
  responses         JoniScenarioResponse[] // Legacy single responses
  practices         JoniScenarioPractice[] // Practice sessions for this scenario
  
  @@index([subjectId])
  @@index([groupId])
  @@index([scenarioType])
  @@index([difficulty])
}

model JoniScenarioResponse {
  id               String       @id @default(cuid())
  scenarioId       String
  scenario         JoniScenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  userId           String
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userResponse     String       @db.Text
  responseAnalysis Json
  correctness      Float        // 0 to 10 score
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  @@index([scenarioId])
  @@index([userId])
  @@index([createdAt])
}

model JoniScenarioStep {
  id                    String                     @id @default(cuid())
  scenarioId            String
  scenario              JoniScenario               @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  stepOrder             Int
  eventType             String                     // "atc", "crew", "emergency", "technical", etc.
  actorRole             String?                    // "tower", "ground", "flightAttendant", "copilot", etc.
  eventDescription      String                     @db.Text
  eventMessage          String                     @db.Text
  expectedComponents    Json                       // Array of required response components
  correctResponseExample String                    @db.Text
  nextStepCondition     String?                    // For branching logic
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  stepResponses         JoniScenarioStepResponse[]
  
  @@index([scenarioId, stepOrder])
  @@unique([scenarioId, stepOrder])
}

model JoniScenarioPractice {
  id                String                      @id @default(cuid())
  scenarioId        String
  scenario          JoniScenario                @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  userId            String
  user              User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  status            String                      @default("in_progress") // "in_progress", "completed", "abandoned"
  currentStepOrder  Int                         @default(1)
  startedAt         DateTime                    @default(now())
  completedAt       DateTime?
  totalScore        Float?
  stepResponses     JoniScenarioStepResponse[]
  
  @@index([userId, scenarioId])
  @@index([status])
}

model JoniScenarioStepResponse {
  id                String               @id @default(cuid())
  practiceId        String
  practice          JoniScenarioPractice @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  stepId            String
  step              JoniScenarioStep     @relation(fields: [stepId], references: [id], onDelete: Cascade)
  userResponse      String               @db.Text
  responseAnalysis  Json
  correctness       Float                // 0 to 10 score
  attempts          Int                  @default(1)
  createdAt         DateTime             @default(now())
  
  @@index([practiceId, stepId])
  @@unique([practiceId, stepId])
}