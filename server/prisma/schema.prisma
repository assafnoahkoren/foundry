// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GrantCause {
  manual
  subscription
}

// Example models
model User {
  id           String       @id @default(cuid())
  email        String       @unique
  name         String
  password     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userAccess   UserAccess[] @relation("UserAccess")
  grantedAccess UserAccess[] @relation("GrantedBy")
  joniScenarioResponses JoniScenarioResponse[]
  joniScenarioPractices JoniScenarioPractice[]
  joniCommBlockProgress JoniCommBlockProgress[]
  joniTransmissionPractices JoniTransmissionPractice[]
  joniScriptPractices JoniScriptPractice[]
}

model UserAccess {
  id           String      @id @default(cuid())
  userId       String
  user         User        @relation("UserAccess", fields: [userId], references: [id], onDelete: Cascade)
  featureId    String
  subFeatureId String
  metadata     Json        @default("{}")
  grantedAt    DateTime    @default(now())
  grantedBy    String?     // ID of admin who granted access
  grantedByUser User?      @relation("GrantedBy", fields: [grantedBy], references: [id], onDelete: SetNull)
  grantCause   GrantCause  @default(manual)
  expiresAt    DateTime?   // Optional expiration date
  updatedAt    DateTime    @updatedAt
  
  @@unique([userId, featureId, subFeatureId])
  @@index([userId])
  @@index([featureId])
  @@index([subFeatureId])
  @@index([grantedBy])
}

// Joni Scenario Practice Models
// Subject represents high-level training areas (e.g., "Radio Communications", "Emergency Procedures")
model JoniScenarioSubject {
  id          String              @id @default(cuid())
  name        String              @unique
  description String?
  icon        String?             // Optional icon identifier for UI
  orderIndex  Int                 @default(1) // Display order
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  scenarios   JoniScenario[]      // Direct scenarios without groups
  groups      JoniScenarioGroup[] // Grouped scenarios
}

model JoniScenarioGroup {
  id          String         @id @default(cuid())
  name        String
  description String?
  groupType   String         @default("module") // "module", "difficulty", "training_program", "category"
  orderInSubject Int         @default(1) // Order of this group within the subject
  subjectId   String
  subject     JoniScenarioSubject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  scenarios   JoniScenario[]
  
  @@index([subjectId])
  @@index([subjectId, orderInSubject])
}

// A scenario represents a complete training exercise with multiple steps
model JoniScenario {
  id                String                 @id @default(cuid())
  name              String                 // e.g., "Medical Emergency Over Atlantic"
  shortDescription  String?                // Brief overview of the scenario
  subjectId         String
  subject           JoniScenarioSubject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  groupId           String?                // Optional - scenarios can exist without groups
  group             JoniScenarioGroup?     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  difficulty        String                 @default("intermediate") // "beginner", "intermediate", "advanced"
  estimatedMinutes  Int                    @default(15) // Estimated completion time
  // Keep old field for migration
  flightInformation String                 @db.Text
  // New fields for dynamic scenarios
  flightInformationJson Json?              // Flexible flight data (aircraft, route, weather, etc.)
  scenarioType      String                 @default("standard") // "standard", "emergency", "crm", "technical", "weather"
  initialContext    String?                @db.Text // Sets the scene for the pilot
  // Legacy fields - kept for backward compatibility
  expectedAnswer    String?                @db.Text
  currentStatus     String?                @db.Text
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  steps             JoniScenarioStep[]     // The sequence of events in this scenario
  responses         JoniScenarioResponse[] // Legacy single responses
  practices         JoniScenarioPractice[] // Practice sessions for this scenario
  
  @@index([subjectId])
  @@index([groupId])
  @@index([scenarioType])
  @@index([difficulty])
}

model JoniScenarioResponse {
  id               String       @id @default(cuid())
  scenarioId       String
  scenario         JoniScenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  userId           String
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userResponse     String       @db.Text
  responseAnalysis Json
  correctness      Float        // 0 to 10 score
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  @@index([scenarioId])
  @@index([userId])
  @@index([createdAt])
}

model JoniScenarioStep {
  id                    String                     @id @default(cuid())
  scenarioId            String
  scenario              JoniScenario               @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  stepOrder             Int
  eventType             String                     // "atc", "crew", "emergency", "technical", etc.
  actorRole             String?                    // "tower", "ground", "flightAttendant", "copilot", etc.
  eventDescription      String                     @db.Text
  eventMessage          String                     @db.Text
  expectedComponents    Json                       // Array of required response components
  correctResponseExample String                    @db.Text
  nextStepCondition     String?                    // For branching logic
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  stepResponses         JoniScenarioStepResponse[]
  
  @@index([scenarioId, stepOrder])
  @@unique([scenarioId, stepOrder])
}

model JoniScenarioPractice {
  id                String                      @id @default(cuid())
  scenarioId        String
  scenario          JoniScenario                @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  userId            String
  user              User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  status            String                      @default("in_progress") // "in_progress", "completed", "abandoned"
  currentStepOrder  Int                         @default(1)
  startedAt         DateTime                    @default(now())
  completedAt       DateTime?
  totalScore        Float?
  stepResponses     JoniScenarioStepResponse[]
  
  @@index([userId, scenarioId])
  @@index([status])
}

model JoniScenarioStepResponse {
  id                String               @id @default(cuid())
  practiceId        String
  practice          JoniScenarioPractice @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  stepId            String
  step              JoniScenarioStep     @relation(fields: [stepId], references: [id], onDelete: Cascade)
  userResponse      String               @db.Text
  responseAnalysis  Json
  correctness       Float                // 0 to 10 score
  attempts          Int                  @default(1)
  createdAt         DateTime             @default(now())
  
  @@index([practiceId, stepId])
  @@unique([practiceId, stepId])
}

// ============================================
// MODULAR ICAO-COMPLIANT COMMUNICATION TRAINING SYSTEM
// ============================================
// This system breaks down aviation radio communications into modular, reusable components
// following ICAO phraseology standards. The hierarchy is:
// 1. CommBlocks: Atomic units (e.g., how to say altitude, callsign, heading)
// 2. Transmissions: Complete radio calls composed of multiple blocks
// 3. Scripts: Full scenarios with back-and-forth transmissions between pilot and ATC

// JoniCommBlock: Atomic ICAO phraseology unit - the smallest teachable element of radio communication
model JoniCommBlock {
  id                String                @id @default(cuid())
  code              String                @unique // e.g., "callsign", "altitude", "heading", "speed"
  name              String                // Human-readable name: "Aircraft Callsign"
  category          String                // "identification", "instruction", "readback", "information"
  description       String?               @db.Text
  icaoReference     String?               // Reference to ICAO Doc 9432 or other standards
  template          String?               @db.Text // Template with variables like "{{callsign}}, request {{altitude}}"
  rules             Json                  // Validation rules and patterns
  examples          Json                  // Array of correct examples
  commonErrors      Json?                 // Common mistakes to watch for
  difficultyLevel   Int                   @default(1) // 1-5 difficulty scale
  orderIndex        Int                   @default(1) // Display order within category
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  
  // Relations
  userProgress      JoniCommBlockProgress[]
  
  @@index([category])
  @@index([code])
}

// JoniTransmissionTemplate: A complete radio transmission composed of ordered CommBlocks
// Examples: "Initial contact with tower", "Request for altitude change", "Landing clearance readback"
// Each transmission combines multiple CommBlocks in a specific order with parameters
model JoniTransmissionTemplate {
  id                String                @id @default(cuid())
  code              String                @unique // e.g., "initial_contact", "altitude_change"
  name              String                // "Initial Contact with Tower"
  description       String?               @db.Text
  transmissionType  String                // "pilot_to_atc", "atc_to_pilot"
  context           String                // "ground", "tower", "departure", "approach", "enroute"
  difficultyLevel   Int                   @default(2)
  estimatedSeconds  Int                   @default(10) // Typical transmission duration
  blocks            Json                  // Array of {blockId, order, parameters, isOptional}
  metadata          Json?                 // Additional context (weather, traffic, etc.)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  
  // Relations
  scriptTransmissions JoniScriptTransmission[]
  practices         JoniTransmissionPractice[]
  
  @@index([transmissionType])
  @@index([context])
}

// JoniScript: A complete training scenario with multiple back-and-forth transmissions
// Simulates real-world radio exchanges between pilot and ATC from start to finish
// Examples: "VFR pattern work", "IFR departure from JFK", "Emergency descent procedure"
model JoniScript {
  id                String                @id @default(cuid())
  code              String                @unique
  name              String                // "IFR Departure from JFK"
  description       String?               @db.Text
  scriptType        String                // "training", "evaluation", "scenario"
  phase             String                // "ground", "departure", "enroute", "approach", "emergency"
  difficultyLevel   Int                   @default(3)
  estimatedMinutes  Int                   @default(5)
  flightContext     Json                  // Aircraft type, route, weather, etc.
  learningObjectives Json?                // What skills this script teaches
  prerequisites     Json?                 // Required completed scripts/blocks
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  
  // Relations
  transmissions     JoniScriptTransmission[]
  practices         JoniScriptPractice[]
  
  @@index([scriptType])
  @@index([phase])
}

// JoniScriptTransmission: Links transmissions into a script with proper sequencing and actor roles
// Defines who speaks (pilot/ATC), when they speak, and what triggers each transmission
model JoniScriptTransmission {
  id                String               @id @default(cuid())
  scriptId          String
  script            JoniScript               @relation(fields: [scriptId], references: [id], onDelete: Cascade)
  transmissionId    String
  transmission      JoniTransmissionTemplate @relation(fields: [transmissionId], references: [id], onDelete: Cascade)
  orderInScript     Int
  actorRole         String               // "pilot", "tower", "ground", "approach"
  expectedDelay     Int?                 // Seconds before this transmission
  triggerCondition  String?              // Condition that triggers this transmission
  
  @@unique([scriptId, orderInScript])
  @@index([scriptId])
  @@index([transmissionId])
}

// JoniCommBlockProgress: Tracks user mastery of individual communication elements
// Monitors how well users can properly say altitudes, callsigns, headings, etc.
model JoniCommBlockProgress {
  id                String      @id @default(cuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  blockId           String
  block             JoniCommBlock  @relation(fields: [blockId], references: [id], onDelete: Cascade)
  proficiencyScore  Float       @default(0) // 0-100 proficiency
  practiceCount     Int         @default(0)
  correctCount      Int         @default(0)
  lastPracticed     DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@unique([userId, blockId])
  @@index([userId])
  @@index([blockId])
}

// JoniTransmissionPractice: Records user attempts at complete radio transmissions
// Scores each CommBlock within the transmission for granular feedback
model JoniTransmissionPractice {
  id                String               @id @default(cuid())
  userId            String
  user              User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  transmissionId    String
  transmission      JoniTransmissionTemplate @relation(fields: [transmissionId], references: [id], onDelete: Cascade)
  userTranscript    String               @db.Text
  blockScores       Json                 // Score for each block in the transmission
  overallScore      Float                // 0-100
  feedback          Json?                // Detailed feedback per block
  completedAt       DateTime             @default(now())
  
  @@index([userId])
  @@index([transmissionId])
  @@index([completedAt])
}

// JoniScriptPractice: Tracks full scenario practice sessions from start to finish
// Manages user progress through multi-transmission scenarios with overall scoring
model JoniScriptPractice {
  id                String      @id @default(cuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  scriptId          String
  script            JoniScript      @relation(fields: [scriptId], references: [id], onDelete: Cascade)
  status            String      @default("in_progress") // "in_progress", "completed", "abandoned"
  currentTransmissionOrder Int   @default(1)
  transmissionScores Json       // Scores for each transmission
  overallScore      Float?      // Final score when completed
  startedAt         DateTime    @default(now())
  completedAt       DateTime?
  sessionRecording  String?     // Optional audio recording URL
  
  @@index([userId, scriptId])
  @@index([status])
}